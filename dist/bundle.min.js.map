{"version":3,"file":"bundle.min.js","sources":["../src/handlers.ts","../src/index.ts"],"sourcesContent":["declare global {\n    interface Window { ethereum: any; web3: any, Portis: any }\n}\n\nimport { ProviderOptions } from './types';\nlet Portis;\n\ntry {\n    Portis = require('portis');\n} catch (err) {\n    Portis = window.Portis;\n}\n\nexport function initDappBrowserProvider() {\n    let provider;\n\n    // Modern dapp browsers\n    if (window.ethereum) {\n        provider = window.ethereum;\n    }\n    // Legacy dapp browsers\n    else if (window.web3) {\n        provider = Object.assign(window.web3.currentProvider, {\n            enable: () => new Promise((resolve, reject) =>\n                window.web3.currentProvider.eth.getAccounts((err, resp) => {\n                    if (err) {\n                        reject(err);\n                    } else {\n                        resolve(resp.result);\n                    }\n                })\n            )\n        });\n    }\n\n    return provider;\n}\n\nexport function initPortisProvider(options: ProviderOptions) {\n    let provider;\n\n    if (Portis) {\n        provider = new Portis.PortisProvider(options.portis);\n    } else {\n        throw 'You have to import Portis. More info here: https://github.com/portis-project/portis-sdk';\n    }\n\n    return provider;\n}\n","import { ProviderOptions } from './types';\nimport { initDappBrowserProvider, initPortisProvider } from './handlers';\n\nexport function getProvider(options: ProviderOptions) {\n    isValidOptions(options);\n    return initDappBrowserProvider() || getPortisProvider(options);\n}\n\nexport function getDappBrowserProvider() {\n    return initDappBrowserProvider();\n}\n\nexport function getPortisProvider(options: ProviderOptions) {\n    isValidOptions(options);\n    return initPortisProvider(options);\n}\n\nfunction isValidOptions(options: ProviderOptions) {\n    if (!options) {\n        throw '`options` object is required';\n    }\n\n    if (!options.portis) {\n        throw '`portis` parameter is required';\n    }\n}\n"],"names":["Portis","require","err","window","provider","ethereum","web3","Object","assign","currentProvider","enable","Promise","resolve","reject","eth","getAccounts","resp","result","options","isValidOptions","PortisProvider","portis","initPortisProvider","initDappBrowserProvider","getPortisProvider"],"mappings":"0MAKA,IAAIA,EAEJ,IACIA,EAASC,QAAQ,UACnB,MAAOC,GACLF,EAASG,OAAOH,OAGpB,aACI,IAAII,EAqBJ,OAlBID,OAAOE,SACPD,EAAWD,OAAOE,SAGbF,OAAOG,OACZF,EAAWG,OAAOC,OAAOL,OAAOG,KAAKG,gBAAiB,CAClDC,OAAQ,WAAM,OAAA,IAAIC,QAAQ,SAACC,EAASC,GAChC,OAAAV,OAAOG,KAAKG,gBAAgBK,IAAIC,YAAY,SAACb,EAAKc,GAC1Cd,EACAW,EAAOX,GAEPU,EAAQI,EAAKC,gBAO1Bb,ECvBX,WAAkCc,GAE9B,OADAC,EAAeD,GDyBnB,SAAmCA,GAG/B,IAAIlB,EAGA,KAAM,0FAGV,OALe,IAAIA,EAAOoB,eAAeF,EAAQG,QC5B1CC,CAAmBJ,GAG9B,WAAwBA,GACpB,IAAKA,EACD,KAAM,+BAGV,IAAKA,EAAQG,OACT,KAAM,wDApBcH,GAExB,OADAC,EAAeD,GACRK,KAA6BC,EAAkBN,6BAG1D,WACI,OAAOK"}