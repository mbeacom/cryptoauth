{"version":3,"file":"bundle.js","sources":["../src/handlers.ts","../src/index.ts"],"sourcesContent":["declare global {\n    interface Window { ethereum: any; web3: any, Portis: any }\n}\n\nimport { ProviderOptions } from './types';\nlet Portis;\n\ntry {\n    Portis = require('portis');\n} catch (err) {\n    Portis = window.Portis;\n}\n\nexport function initDappBrowserProvider() {\n    let provider;\n\n    // Modern dapp browsers\n    if (window.ethereum) {\n        provider = window.ethereum;\n    }\n    // Legacy dapp browsers\n    else if (window.web3) {\n        provider = Object.assign(window.web3.currentProvider, {\n            enable: () => new Promise((resolve, reject) =>\n                window.web3.currentProvider.eth.getAccounts((err, resp) => {\n                    if (err) {\n                        reject(err);\n                    } else {\n                        resolve(resp.result);\n                    }\n                })\n            )\n        });\n    }\n\n    return provider;\n}\n\nexport function initPortisProvider(options: ProviderOptions) {\n    let provider;\n\n    if (Portis) {\n        provider = new Portis.PortisProvider(options.portis);\n    } else {\n        throw 'You have to import Portis. More info here: https://github.com/portis-project/portis-sdk';\n    }\n\n    return provider;\n}\n","import { ProviderOptions } from './types';\nimport { initDappBrowserProvider, initPortisProvider } from './handlers';\n\nexport function getProvider(options: ProviderOptions) {\n    isValidOptions(options);\n    return initDappBrowserProvider() || getPortisProvider(options);\n}\n\nexport function getDappBrowserProvider() {\n    return initDappBrowserProvider();\n}\n\nexport function getPortisProvider(options: ProviderOptions) {\n    isValidOptions(options);\n    return initPortisProvider(options);\n}\n\nfunction isValidOptions(options: ProviderOptions) {\n    if (!options) {\n        throw '`options` object is required';\n    }\n\n    if (!options.portis) {\n        throw '`portis` parameter is required';\n    }\n}\n"],"names":[],"mappings":";;;;;;AAKA,IAAI,MAAM,CAAC;AAEX,IAAI;IACA,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;CAC9B;AAAC,OAAO,GAAG,EAAE;IACV,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;CAC1B;AAED;IACI,IAAI,QAAQ,CAAC;;IAGb,IAAI,MAAM,CAAC,QAAQ,EAAE;QACjB,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;KAC9B;SAEI,IAAI,MAAM,CAAC,IAAI,EAAE;QAClB,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE;YAClD,MAAM,EAAE,cAAM,OAAA,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;gBACtC,OAAA,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,WAAW,CAAC,UAAC,GAAG,EAAE,IAAI;oBAClD,IAAI,GAAG,EAAE;wBACL,MAAM,CAAC,GAAG,CAAC,CAAC;qBACf;yBAAM;wBACH,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;qBACxB;iBACJ,CAAC;aAAA,CACL,GAAA;SACJ,CAAC,CAAC;KACN;IAED,OAAO,QAAQ,CAAC;CACnB;AAED,4BAAmC,OAAwB;IACvD,IAAI,QAAQ,CAAC;IAEb,IAAI,MAAM,EAAE;QACR,QAAQ,GAAG,IAAI,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;KACxD;SAAM;QACH,MAAM,yFAAyF,CAAC;KACnG;IAED,OAAO,QAAQ,CAAC;CACnB;;qBC7C2B,OAAwB;IAChD,cAAc,CAAC,OAAO,CAAC,CAAC;IACxB,OAAO,uBAAuB,EAAE,IAAI,iBAAiB,CAAC,OAAO,CAAC,CAAC;CAClE;AAED;IACI,OAAO,uBAAuB,EAAE,CAAC;CACpC;AAED,2BAAkC,OAAwB;IACtD,cAAc,CAAC,OAAO,CAAC,CAAC;IACxB,OAAO,kBAAkB,CAAC,OAAO,CAAC,CAAC;CACtC;AAED,wBAAwB,OAAwB;IAC5C,IAAI,CAAC,OAAO,EAAE;QACV,MAAM,8BAA8B,CAAC;KACxC;IAED,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;QACjB,MAAM,gCAAgC,CAAC;KAC1C;CACJ;;;;;;;;;;;;;;"}