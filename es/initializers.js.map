{"version":3,"file":"initializers.js","sourceRoot":"","sources":["../src/initializers.ts"],"names":[],"mappings":"AAKA,IAAI,MAAM,CAAC;AAEX,IAAI,CAAC;IACD,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,CAAC;AAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACX,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;AAC3B,CAAC;AAED,MAAM;IACF,IAAI,QAAQ,CAAC;IAEb,uBAAuB;IACvB,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;QAClB,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;IAC/B,CAAC;IAED,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QACnB,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE;YAClD,MAAM,EAAE,cAAM,OAAA,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;gBACtC,OAAA,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,WAAW,CAAC,UAAC,GAAG,EAAE,IAAI;oBAClD,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;wBACN,MAAM,CAAC,GAAG,CAAC,CAAC;oBAChB,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBACzB,CAAC;gBACL,CAAC,CAAC;YANF,CAME,CACL,EARa,CAQb;SACJ,CAAC,CAAC;IACP,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC;AACpB,CAAC;AAED,MAAM,6BAA6B,OAAwB;IACvD,IAAI,QAAQ,CAAC;IAEb,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QACT,QAAQ,GAAG,IAAI,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACzD,CAAC;IAAC,IAAI,CAAC,CAAC;QACJ,MAAM,sGAAsG,CAAC;IACjH,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC;AACpB,CAAC","sourcesContent":["declare global {\n    interface Window { ethereum: any; web3: any, Portis: any }\n}\n\nimport { ProviderOptions } from './types';\nlet Portis;\n\ntry {\n    Portis = require('portis');\n} catch (err) {\n    Portis = window.Portis;\n}\n\nexport function initDappBrowserProvider() {\n    let provider;\n\n    // Modern dapp browsers\n    if (window.ethereum) {\n        provider = window.ethereum;\n    }\n    // Legacy dapp browsers\n    else if (window.web3) {\n        provider = Object.assign(window.web3.currentProvider, {\n            enable: () => new Promise((resolve, reject) =>\n                window.web3.currentProvider.eth.getAccounts((err, resp) => {\n                    if (err) {\n                        reject(err);\n                    } else {\n                        resolve(resp.result);\n                    }\n                })\n            )\n        });\n    }\n\n    return provider;\n}\n\nexport function initPortisProvider(options: ProviderOptions) {\n    let provider;\n\n    if (Portis) {\n        provider = new Portis.PortisProvider(options.portis);\n    } else {\n        throw '[cryptoauth] You have to import Portis. More info here: https://github.com/portis-project/portis-sdk';\n    }\n\n    return provider;\n}\n"]}